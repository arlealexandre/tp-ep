}
}
# Scheduling discipline
if (scheduling_discipline == 1) {
# FCFS: First-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the first available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = min(server_queue)
}
}
}
} else if (scheduling_discipline == 2) {
# LCFS: Last-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the last available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = max(server_queue)
}
}
}
} else if (scheduling_discipline == 3) {
# ROS: Random Order of Service
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Choose a random available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = sample(server_queue, size = 1)
}
}
}
} else if (scheduling_discipline == 4) {
# SRPT: Shortest Remaining Processing Time
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the task with the shortest remaining processing time
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = server_queue[which.min(Remaining[i, server_queue])]
}
}
}
}
if (debug == 1) {
print(paste("Current Tasks = ", CurrentTasks))
readline(prompt = "Press [enter] to proceed")
}
}  # while
ResponseTime = mean(Completion - Arrival)  # average response time
AvgJobs = AvgJobs / (tail(Completion, n = 1) - Arrival[1])
# Simulation completed. Let's verify Little's law: N = lambda * R
r_names = rownames(R_time)
cat(paste("Sim. ", r_names[scheduling_discipline], "(rho=", round(lambda*ES, digits = 2), ") completed."))
cat(paste(" Little's law verification: ", round(AvgJobs, digits = 4), "= N = lambda * R = ", round(lambda*ResponseTime, digits = 4), "\n"))
R_time[scheduling_discipline, cnt]
R_time[scheduling_discipline, cnt] = ResponseTime
}  # loop scheduling discipline
}  # loop lambda
cat("\nResponse time matrix:\n")
print(R_time)
matplot(t(R_time), type = "l", xlab = "Load (lambda*E[S])", ylab = "Avg Response Time", xaxt = "n", lwd = 3)
legend("topleft", legend = rownames(R_time), col = 1:4, pch = 1)
axis(side = 1, at = 1:ncol(R_time), labels = round(lambdas*ES, digits = 3))
}  # end function
knitr::opts_chunk$set(echo = FALSE)
set.seed(11); # Set seed for reproducibility
N = 10; # number of jobs to simulate;
k = 3; # number of servers
mu=1;
Service=rexp(N,rate=mu*k); # Service times, the rate here is mu * k
plot_response_times(k, Service, 1/mu);
knitr::opts_chunk$set(echo = TRUE)
# This function plot the average response time of a M/G/1 queue for various scheduling disciplines.
# As input, it takes the number of servers (k), their job service times (Service) with their mean value (ES)
plot_response_times <- function(k,Service, ES) {
debug = 0
scheduling_disciplines = c(1:4)  # 'FCFS'=1, 'LCFS'=2, 'RO-S'=3, 'SRPT'=4
num_arrival_rates <- 5
lambdas = (1/ES) * c(1:num_arrival_rates)/(num_arrival_rates+1)
# Matrix of average response times for all disciplines and arrival rates
R_time = matrix(0, nrow = length(scheduling_disciplines), ncol = length(lambdas))
rownames(R_time) = c("FCFS", "LCFS", "RO-S", "SRPT")
colnames(R_time) = paste("rho=", round(lambdas*ES, digits = 3), sep = "")
cnt = 0
for (lambda in lambdas) {
cnt = cnt + 1
Arrival = cumsum(rexp(n = k*N, rate = lambda))  # Arrival times
for (scheduling_discipline in scheduling_disciplines) {
t = 0  # simulation time
Remaining = matrix(rep(N, x = NA), nrow = k)  # Remaining service times of each job at each server
Completion = rep(N, x = NA)  # Completion time of each job
AvgJobs = 0
CurrentTasks = rep(NA, k)  # Current task being served at each server
NextArrival = 1
while (TRUE) {
if (debug == 1) {
print("*********************")
print(Arrival)
print(Service)
print(Remaining)
}
dtA = NA
dtC = rep(NA, k)
for (i in 1:k) {
if (length(Arrival[Arrival > t]) > 0) {  # if an arrival exists after t
dtA = min(dtA, head(Arrival[Arrival > t], n = 1) - t)  # time to next arrival
}
if (!is.na(CurrentTasks[i])) {  # if a task is running
dtC[i] = Remaining[i, CurrentTasks[i]]  # time to next completion
}
}
# Handle case when both dtA and dtC are NA
if (all(is.na(dtA)) & all(is.na(dtC))) {
dt = NA
} else {
dt = min(c(dtA, dtC), na.rm = TRUE)  # minimum of arrival and completion times
}
# update system variables
t = t + dt
AvgJobs = AvgJobs + dt * sum(!is.na(Remaining))
if (debug == 1) {
print(paste("Sim. time:", t))
print(paste("# of jobs arrived: ", NextArrival))
}
# Job arrival
if ((NextArrival <= k*N) & (Arrival[NextArrival] == t)) {
server_index = NextArrival %% k
if (server_index == 0) server_index = k
Remaining[server_index, NextArrival] = Service[NextArrival]
NextArrival = NextArrival + 1
}
# Job departure
for (i in 1:k) {
if (!is.na(CurrentTasks[i])) {
Remaining[i, CurrentTasks[i]] = Remaining[i, CurrentTasks[i]] - dt
if (Remaining[i, CurrentTasks[i]] <= 0) {
# CurrentTask completed
Completion[CurrentTasks[i]] = t
Remaining[i, CurrentTasks[i]] = NA
CurrentTasks[i] = NA
}
}
}
# Scheduling discipline
if (scheduling_discipline == 1) {
# FCFS: First-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the first available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = min(server_queue)
}
}
}
} else if (scheduling_discipline == 2) {
# LCFS: Last-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the last available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = max(server_queue)
}
}
}
} else if (scheduling_discipline == 3) {
# ROS: Random Order of Service
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Choose a random available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = sample(server_queue, size = 1)
}
}
}
} else if (scheduling_discipline == 4) {
# SRPT: Shortest Remaining Processing Time
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the task with the shortest remaining processing time
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = server_queue[which.min(Remaining[i, server_queue])]
}
}
}
}
if (debug == 1) {
print(paste("Current Tasks = ", CurrentTasks))
readline(prompt = "Press [enter] to proceed")
}
}  # while
ResponseTime = mean(Completion - Arrival)  # average response time
AvgJobs = AvgJobs / (tail(Completion, n = 1) - Arrival[1])
# Simulation completed. Let's verify Little's law: N = lambda * R
r_names = rownames(R_time)
cat(paste("Sim. ", r_names[scheduling_discipline], "(rho=", round(lambda*ES, digits = 2), ") completed."))
cat(paste(" Little's law verification: ", round(AvgJobs, digits = 4), "= N = lambda * R = ", round(lambda*ResponseTime, digits = 4), "\n"))
R_time[scheduling_discipline, cnt]
R_time[scheduling_discipline, cnt] = ResponseTime
}  # loop scheduling discipline
}  # loop lambda
cat("\nResponse time matrix:\n")
print(R_time)
matplot(t(R_time), type = "l", xlab = "Load (lambda*E[S])", ylab = "Avg Response Time", xaxt = "n", lwd = 3)
legend("topleft", legend = rownames(R_time), col = 1:4, pch = 1)
axis(side = 1, at = 1:ncol(R_time), labels = round(lambdas*ES, digits = 3))
}  # end function
knitr::opts_chunk$set(echo = FALSE)
set.seed(11); # Set seed for reproducibility
N = 10; # number of jobs to simulate;
k = 3; # number of servers
mu=1;
Service=rexp(N,rate=mu*k); # Service times, the rate here is mu * k
plot_response_times(k, Service, 1/mu);
knitr::opts_chunk$set(echo = TRUE)
# This function plot the average response time of a M/G/1 queue for various scheduling disciplines.
# As input, it takes the number of servers (k), their job service times (Service) with their mean value (ES)
plot_response_times <- function(k,Service, ES) {
debug = 0
scheduling_disciplines = c(1:4)  # 'FCFS'=1, 'LCFS'=2, 'RO-S'=3, 'SRPT'=4
num_arrival_rates <- 5
lambdas = (1/ES) * c(1:num_arrival_rates)/(num_arrival_rates+1)
# Matrix of average response times for all disciplines and arrival rates
R_time = matrix(0, nrow = length(scheduling_disciplines), ncol = length(lambdas))
rownames(R_time) = c("FCFS", "LCFS", "RO-S", "SRPT")
colnames(R_time) = paste("rho=", round(lambdas*ES, digits = 3), sep = "")
cnt = 0
for (lambda in lambdas) {
cnt = cnt + 1
Arrival = cumsum(rexp(n = k * N, rate = lambda))  # Arrival times
for (scheduling_discipline in scheduling_disciplines) {
t = 0  # simulation time
Remaining = matrix(rep(N, each = k), nrow = k)  # Remaining service times of each job at each server
Completion = rep(N, each = k)  # Completion time of each job
AvgJobs = 0
CurrentTasks = rep(NA, k)  # Current task being served at each server
NextArrival = 1
while (TRUE) {
if (debug == 1) {
print("*********************")
print(Arrival)
print(Service)
print(Remaining)
}
dtA = NA
dtC = rep(NA, k)
for (i in 1:k) {
if (length(Arrival[Arrival > t]) > 0) {  # if an arrival exists after t
dtA = min(dtA, head(Arrival[Arrival > t], n = 1) - t)  # time to next arrival
}
if (!is.na(CurrentTasks[i])) {  # if a task is running
dtC[i] = Remaining[i, CurrentTasks[i]]  # time to next completion
}
}
# Handle case when both dtA and dtC are NA
if (all(is.na(dtA)) & all(is.na(dtC))) {
dt = NA
} else {
dt = min(c(dtA, dtC), na.rm = TRUE)  # minimum of arrival and completion times
}
# update system variables
t = t + dt
AvgJobs = AvgJobs + dt * sum(!is.na(Remaining))
if (debug == 1) {
print(paste("Sim. time:", t))
print(paste("# of jobs arrived: ", NextArrival))
}
# Job arrival
if ((NextArrival <= k * N) & (!is.na(Arrival[NextArrival])) & (Arrival[NextArrival] == t)) {
server_index = NextArrival %% k
if (server_index == 0) server_index = k
Remaining[server_index, NextArrival] = Service[NextArrival]
NextArrival = NextArrival + 1
}
# Job departure
for (i in 1:k) {
if (!is.na(CurrentTasks[i])) {
Remaining[i, CurrentTasks[i]] = Remaining[i, CurrentTasks[i]] - dt
if (Remaining[i, CurrentTasks[i]] <= 0) {
# CurrentTask completed
Completion[CurrentTasks[i]] = t
Remaining[i, CurrentTasks[i]] = NA
CurrentTasks[i] = NA
}
}
}
# Scheduling discipline
if (scheduling_discipline == 1) {
# FCFS: First-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the first available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = min(server_queue)
}
}
}
} else if (scheduling_discipline == 2) {
# LCFS: Last-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the last available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = max(server_queue)
}
}
}
} else if (scheduling_discipline == 3) {
# ROS: Random Order of Service
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Choose a random available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = sample(server_queue, size = 1)
}
}
}
} else if (scheduling_discipline == 4) {
# SRPT: Shortest Remaining Processing Time
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the task with the shortest remaining processing time
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = server_queue[which.min(Remaining[i, server_queue])]
}
}
}
}
if (debug == 1) {
print(paste("Current Tasks = ", CurrentTasks))
readline(prompt = "Press [enter] to proceed")
}
}  # while
ResponseTime = mean(Completion - Arrival)  # average response time
AvgJobs = AvgJobs / (tail(Completion, n = 1) - Arrival[1])
# Simulation completed. Let's verify Little's law: N = lambda * R
r_names = rownames(R_time)
cat(paste("Sim. ", r_names[scheduling_discipline], "(rho=", round(lambda*ES, digits = 2), ") completed."))
cat(paste(" Little's law verification: ", round(AvgJobs, digits = 4), "= N = lambda * R = ", round(lambda*ResponseTime, digits = 4), "\n"))
R_time[scheduling_discipline, cnt] = ResponseTime
}  # loop scheduling discipline
}  # loop lambda
cat("\nResponse time matrix:\n")
print(R_time)
matplot(t(R_time), type = "l", xlab = "Load (lambda*E[S])", ylab = "Avg Response Time", xaxt = "n", lwd = 3)
legend("topleft", legend = rownames(R_time), col = 1:4, pch = 1)
axis(side = 1, at = 1:ncol(R_time), labels = round(lambdas*ES, digits = 3))
}  # end function
knitr::opts_chunk$set(echo = FALSE)
set.seed(11); # Set seed for reproducibility
N = 10; # number of jobs to simulate;
k = 3; # number of servers
mu=1;
Service=rexp(N,rate=mu*k); # Service times, the rate here is mu * k
plot_response_times(k, Service, 1/mu);
knitr::opts_chunk$set(echo = TRUE)
# This function plot the average response time of a M/G/1 queue for various scheduling disciplines.
# As input, it takes the number of servers (k), their job service times (Service) with their mean value (ES)
plot_response_times <- function(k,Service, ES) {
debug = 0
scheduling_disciplines = c(1:4)  # 'FCFS'=1, 'LCFS'=2, 'RO-S'=3, 'SRPT'=4
num_arrival_rates <- 5
lambdas = (1/ES) * c(1:num_arrival_rates)/(num_arrival_rates+1)
# Matrix of average response times for all disciplines and arrival rates
R_time = matrix(0, nrow = length(scheduling_disciplines), ncol = length(lambdas))
rownames(R_time) = c("FCFS", "LCFS", "RO-S", "SRPT")
colnames(R_time) = paste("rho=", round(lambdas*ES, digits = 3), sep = "")
cnt = 0
for (lambda in lambdas) {
cnt = cnt + 1
Arrival = cumsum(rexp(n = k * N, rate = lambda))  # Arrival times
for (scheduling_discipline in scheduling_disciplines) {
t = 0  # simulation time
Remaining = matrix(rep(N, each = k), nrow = k)  # Remaining service times of each job at each server
Completion = rep(N, each = k)  # Completion time of each job
AvgJobs = 0
CurrentTasks = rep(NA, k)  # Current task being served at each server
NextArrival = 1
while (TRUE) {
if (debug == 1) {
print("*********************")
print(Arrival)
print(Service)
print(Remaining)
}
dtA = NA
dtC = rep(NA, k)
for (i in 1:k) {
if (length(Arrival[Arrival > t]) > 0) {  # if an arrival exists after t
dtA = min(dtA, head(Arrival[Arrival > t], n = 1) - t)  # time to next arrival
}
if (!is.na(CurrentTasks[i])) {  # if a task is running
dtC[i] = Remaining[i, CurrentTasks[i]]  # time to next completion
}
}
# Handle case when both dtA and dtC are NA
if (all(is.na(dtA)) & all(is.na(dtC))) {
dt = NA
} else {
dt = min(c(dtA, dtC), na.rm = TRUE)  # minimum of arrival and completion times
}
# update system variables
t = t + dt
AvgJobs = AvgJobs + dt * sum(!is.na(Remaining))
if (debug == 1) {
print(paste("Sim. time:", t))
print(paste("# of jobs arrived: ", NextArrival))
}
# Job arrival
if ((NextArrival <= k * N) && !is.na(NextArrival) && (Arrival[NextArrival] == t)) {
server_index = NextArrival %% k
if (server_index == 0) server_index = k
Remaining[server_index, NextArrival] = Service[NextArrival]
NextArrival = NextArrival + 1
}
# Job departure
for (i in 1:k) {
if (!is.na(CurrentTasks[i])) {
Remaining[i, CurrentTasks[i]] = Remaining[i, CurrentTasks[i]] - dt
if (Remaining[i, CurrentTasks[i]] <= 0) {
# CurrentTask completed
Completion[CurrentTasks[i]] = t
Remaining[i, CurrentTasks[i]] = NA
CurrentTasks[i] = NA
}
}
}
# Scheduling discipline
if (scheduling_discipline == 1) {
# FCFS: First-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the first available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = min(server_queue)
}
}
}
} else if (scheduling_discipline == 2) {
# LCFS: Last-Come-First-Served
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the last available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = max(server_queue)
}
}
}
} else if (scheduling_discipline == 3) {
# ROS: Random Order of Service
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Choose a random available task to serve
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = sample(server_queue, size = 1)
}
}
}
} else if (scheduling_discipline == 4) {
# SRPT: Shortest Remaining Processing Time
for (i in 1:k) {
if (is.na(CurrentTasks[i])) {
# Find the task with the shortest remaining processing time
server_queue = which(!is.na(Remaining[i, ]))
if (length(server_queue) > 0) {
CurrentTasks[i] = server_queue[which.min(Remaining[i, server_queue])]
}
}
}
}
if (debug == 1) {
print(paste("Current Tasks = ", CurrentTasks))
readline(prompt = "Press [enter] to proceed")
}
}  # while
ResponseTime = mean(Completion - Arrival)  # average response time
AvgJobs = AvgJobs / (tail(Completion, n = 1) - Arrival[1])
# Simulation completed. Let's verify Little's law: N = lambda * R
r_names = rownames(R_time)
cat(paste("Sim. ", r_names[scheduling_discipline], "(rho=", round(lambda*ES, digits = 2), ") completed."))
cat(paste(" Little's law verification: ", round(AvgJobs, digits = 4), "= N = lambda * R = ", round(lambda*ResponseTime, digits = 4), "\n"))
R_time[scheduling_discipline, cnt] = ResponseTime
}  # loop scheduling discipline
}  # loop lambda
cat("\nResponse time matrix:\n")
print(R_time)
matplot(t(R_time), type = "l", xlab = "Load (lambda*E[S])", ylab = "Avg Response Time", xaxt = "n", lwd = 3)
legend("topleft", legend = rownames(R_time), col = 1:4, pch = 1)
axis(side = 1, at = 1:ncol(R_time), labels = round(lambdas*ES, digits = 3))
}  # end function
knitr::opts_chunk$set(echo = FALSE)
set.seed(11); # Set seed for reproducibility
N = 10; # number of jobs to simulate;
k = 3; # number of servers
mu=1;
Service=rexp(N,rate=mu*k); # Service times, the rate here is mu * k
plot_response_times(k, Service, 1/mu);
